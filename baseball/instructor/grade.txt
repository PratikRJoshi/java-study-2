Submission
Submission time	Tue-16-Apr 02:06:56
Raw Score	100.00 / 100.00
Feedback	See the Assessment Guide for information on how to read this report.
Assessment Summary
Compilation:  PASSED
Style:        PASSED
Findbugs:     No potential bugs found.
API:          PASSED

Correctness:  15/15 tests passed
Memory:       4/4 tests passed
Timing:       1/1 tests passed

Raw score: 100.00% [Correctness: 65%, Memory: 10%, Timing: 25%, Style: 0%]
Assessment Details
files submitted
----------------------------------
total 16K
-rw-r--r-- 1  11K Apr 16 06:07 BaseballElimination.java
-rw-r--r-- 1 3.3K Apr 16 06:07 studentSubmission.zip


******************************************************************************
*  compiling
******************************************************************************


% javac BaseballElimination.java
*-----------------------------------------------------------
================================================================



% checkstyle *.java
*-----------------------------------------------------------
================================================================


% findbugs *.class
*-----------------------------------------------------------
================================================================


Testing the APIs of your programs.
*-----------------------------------------------------------
BaseballElimination:

================================================================


******************************************************************************
*  executing
******************************************************************************

Testing methods in BaseballElimination
*-----------------------------------------------------------
Running 15 total tests.

Test 0: test main()

   % java BaseballElimination teams4.txt
   Atlanta is not eliminated
   Montreal is eliminated by the subset R = { Atlanta }
   New_York is not eliminated
   Philadelphia is eliminated by the subset R = { New_York Atlanta }

   % java BaseballElimination teams5.txt
   Detroit is eliminated by the subset R = { Toronto Boston Baltimore New_York }
   Baltimore is not eliminated
   Boston is not eliminated
   New_York is not eliminated
   Toronto is not eliminated

==> passed

Test 1: calls to numberOfTeams()
  *  teams4.txt
  *  teams5.txt
  *  teams8.txt
  *  teams10.txt
  *  teams29.txt
  *  teams48.txt
==> passed

Test 2: calls to teams()
  *  teams4.txt
  *  teams5.txt
  *  teams8.txt
  *  teams10.txt
  *  teams29.txt
  *  teams48.txt
==> passed

Test 3: calls to wins()
  *  teams4.txt
  *  teams5.txt
  *  teams8.txt
  *  teams10.txt
  *  teams29.txt
  *  teams48.txt
==> passed

Test 4: calls to losses()
  *  teams4.txt
  *  teams5.txt
  *  teams8.txt
  *  teams10.txt
  *  teams29.txt
  *  teams48.txt
==> passed

Test 5: calls to remaining()
  *  teams4.txt
  *  teams5.txt
  *  teams8.txt
  *  teams10.txt
  *  teams29.txt
  *  teams48.txt
==> passed

Test 6: calls to against()
  *  teams4.txt
  *  teams5.txt
  *  teams8.txt
  *  teams10.txt
  *  teams29.txt
  *  teams48.txt
==> passed

Test 7: calls to isEliminated()
  *  teams4.txt
  *  teams4a.txt
  *  teams4b.txt
  *  teams5.txt
  *  teams5a.txt
  *  teams5b.txt
  *  teams5c.txt
  *  teams7.txt
  *  teams8.txt
  *  teams10.txt
  *  teams12.txt
  *  teams24.txt
  *  teams29.txt
  *  teams30.txt
  *  teams32.txt
  *  teams36.txt
  *  teams42.txt
  *  teams48.txt
  *  teams12-allgames.txt
==> passed

Test 8: check that isEliminated() is consistent with certificateOfElimination()
  *  teams4.txt
  *  teams5.txt
  *  teams8.txt
  *  teams10.txt
  *  teams29.txt
  *  teams48.txt
==> passed

Test 9: calls to certificateOfElimination()
  *  teams4.txt
  *  teams4a.txt
  *  teams4b.txt
  *  teams5.txt
  *  teams5a.txt
  *  teams5b.txt
  *  teams5c.txt
  *  teams7.txt
  *  teams8.txt
  *  teams10.txt
  *  teams12.txt
  *  teams24.txt
  *  teams29.txt
  *  teams30.txt
  *  teams32.txt
  *  teams36.txt
  *  teams42.txt
  *  teams48.txt
  *  teams12-allgames.txt
==> passed

Test 10: only 1 team in division
  *  teams1.txt
  *  teams1.txt
  *  teams1.txt
  *  teams1.txt
  *  teams1.txt
  *  teams1.txt
  *  teams1.txt
==> passed

Test 11: call certificateOfElimination() before and after calling isEliminated()
  *  teams4.txt
  *  teams5.txt
  *  teams29.txt
==> passed

Test 12: check that certificateOfElimination() returns null
  *  teams4.txt
  *  teams5.txt
==> passed

Test 13: check for invalid arguments
  *  teams4.txt
  *  teams5.txt
==> passed

Test 14: check for dependence on reference equality of strings
==> passed


Total: 15/15 tests passed!

================================================================

******************************************************************************
*  timing
******************************************************************************

Timing BaseballElimination
*-----------------------------------------------------------
Running 1 total tests.

    N   constructor isEliminated() + certificateOfElimination()
----------------------------------------------------------------
   30       0.03       0.54
   36       0.02       1.16
   42       0.01       1.84
   48       0.01       3.65
   54       0.01       5.67
   60       0.01       9.03
time = 7.29e-07 * N^3.98  (R^2 = 1.00)

Total: 1/1 tests passed!

================================================================



******************************************************************************
*  memory usage
******************************************************************************

Computing memory of BaseballElimination
*-----------------------------------------------------------
Running 4 total tests.

Student   vertices     = 0.50 N^2 + -0.55 N + 3.38  (R^2 = 1.000)
Reference vertices     = 0.50 N^2 + -0.50 N + 3.00  (R^2 = 1.000)
=> passed
Student   edges        = 1.50 N^2 + -3.64 N + 3.12  (R^2 = 1.000)
Reference edges        = 1.50 N^2 + -3.50 N + 2.00  (R^2 = 1.000)
=> passed
Student   memory of G  = 200.33 N^2 + -458.65 N + 566.00  (R^2 = 1.000)
Reference memory of G  = 200.00 N^2 + -440.00 N + 416.00  (R^2 = 1.000)
=> passed
Student   memory       = 1.97 N^2 + 217.27 N + 294.86  (R^2 = 1.000)
Reference memory       = 3.99 N^2 + 230.25 N + 396.00  (R^2 = 1.000)
=> passed
Total: 4/4 tests passed!

================================================================
